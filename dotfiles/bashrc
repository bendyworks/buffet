#!/usr/bin/env bash
#   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#   ┃                                   ┃
#   ┃   ____         __  __      _      ┃
#   ┃  | __ ) _   _ / _|/ _| ___| |_    ┃
#   ┃  |  _ \| | | | |_| |_ / _ \ __|   ┃
#   ┃  | |_) | |_| |  _|  _|  __/ |_    ┃
#   ┃  |____/ \__,_|_| |_|  \___|\__|   ┃
#   ┃                                   ┃
#   ┃        By Bendyworks - 2018       ┃
#   ┃                                   ┃
#   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#
# FUNCTIONS ===================================================================

source_if_exists() { if [ -f $1 ]; then . $1; eval $2; fi; }
prepend_to_path() { if [ -d $1 ]; then export PATH="$1:$PATH"; fi; }
append_to_path() { if [ -d $1 ]; then export PATH="$PATH:$1"; fi; }

# create a directory and immediately move to that directory
take() { mkdir -p $1; cd $1; }

# Heroku Helper:
# If the project folder is "FOO",
# And the production heroku app is named "FOO-production",
# then you can call:
#
#     prod heroku [cmd] [opts]
#
prod() {
  $* --app $(basename $(pwd))-production
}

brewyolo() {
  brew update && brew outdated && brew upgrade && brew postgresql-upgrade-database || brew cleanup && brew prune
}

npmnuke() {
  rm -rf node_modules && npm install
}

# VARIABLES ===================================================================
# normalize the PATH stack
export PATH='/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin'

# Buffet bins
prepend_to_path "$HOME/.buffet/bin"

# Android SDK
if [ -d "$HOME/Library/Android/sdk" ]; then
  export ANDROID_HOME="$HOME/Library/Android/sdk"
  prepend_to_path "$ANDROID_HOME/platform-tools"
  prepend_to_path "$ANDROID_HOME/tools"
fi

# Node Version Manager
if [ -d "$HOME/.nvm" ]; then
  export NVM_DIR="$HOME/.nvm"
  source_if_exists "$NVM_DIR/nvm.sh"
fi

# Ruby Version Manager
if [ -d "$HOME/.rvm" ]; then
  prepend_to_path "$HOME/.rvm/bin"
  source_if_exists "$HOME/.rvm/scripts/rvm"
fi

# ENVIRONMENT VARIABLES =======================================================

# set vim as the default editor
export EDITOR=vim
export VISUAL=vim

# not used by any program, but nice to reference
export PG_DATA_DIR='/usr/local/var/postgres'

# ignore common large directories in grep
export GREP_OPTIONS='--exclude-dir=.svn --exclude-dir=.git --exclude-dir=tmp'

# ALIASES =====================================================================

# upwards directory navigation
alias ..='cd ..' # ':' is reserved in bash as equivalent to true
alias ::='cd ../..'
alias :::='cd ../../..'
alias ::::='cd ../../../..'
alias :::::='cd ../../../../..'

# shortcuts for the most commonly used tools
alias be='bundle exec'
alias v='vim'
alias g='git'
alias gr='grunt'
alias r='rake'

# override common tools with useful arguments
alias grep='grep --color'
alias la='ls -lah'
alias ls='ls -FG'
alias psack='ps aux | grep'

# Git aliases adopted by seemingly every dev shop
alias gap='git add -p'
alias gst='git status'

# make Postgres not a huge PITA to start/stop
alias pgup="pg_ctl -D $PG_DATA_DIR -l $PG_DATA_DIR/server.log start"
alias pgdown="pg_ctl -D $PG_DATA_DIR stop"

# run a server in the current directory
alias server='ruby -run -e httpd . -p 9090'

# attach to the tmux session or create a new session named after the user
alias t='tmux attach-session -t "$(whoami)" || tmux new-session -s "$(whoami)"'

# update Vim plugins
alias vundle='vim +PluginInstall! +qall'


# AUTO-COMPLETION =============================================================
source_if_exists "$BUFFET_DIRECTORY/bin/brew-auto-complete"
source_if_exists "$BUFFET_DIRECTORY/bin/npm-auto-complete"

# source any homebrew-supplied autocompletion files
comps_file='/usr/local/etc/bash_completion'

OS="`uname`"
case $OS in
  "Linux")
    ;;
  "Darwin")
    if [ -f `brew --prefix`/etc/bash_completion ]; then
      . `brew --prefix`/etc/bash_completion
    fi
    ;;
esac

# use git autocompletion when "git" is aliased to "g"
if type __git_complete &>/dev/null; then
  __git_complete g __git_main
fi


# OTHER SOURCED FILES =========================================================
source_if_exists "$HOME/.pair"            # "pair() shell function to set Git pairs"
source_if_exists "$HOME/.bashrc.local"    # local .bashrc overrides
source_if_exists "$HOME/.prompt"          # Bash prompt

# EOF =========================================================================
